package tracker;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Map;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;

/**
 * Peer stores numerous values for a peer that a client would like to connect to.
 * It contains fields for IP, ID, port, the socket used to connect with the peer,
 * DataInputStream, DataOutputStream, and a boolean flag to check if the remote peer
 * is choking the client. All these fields will be filled and later used throughout all the files.
 * @author Neil Patel
 *
 */

public class Peer {

	/**
	 * Stores the IP address of a remote peer.
	 */
	//should be byte[]
	private String peerIP;
	
	/**
	 * Stores the ID of a remote peer.
	 */
	private byte[] peerID;
	
	/**
	 * Stores the port number of a remote peer.
	 */
	private int port;
	
	/**
	 * This is the socket used to connect to the remote peer.
	 * Uses the peerIP and peerID fields to correctly initialize the socket.
	 */
	private Socket socket;
	
	/**
	 * This is the DataOutputStream used to send data from the client's socket to the
	 * remote peer's socket.
	 */
	private DataOutputStream out;
	
	/**
	 * This is the DataInputStream used to receive data from the remote peer's socket into
	 * the client's socket.
	 */
	private DataInputStream in;
	
	/**
	 * This boolean will be used to determine if the remote peer is currently choking us.
	 * If the remote peer is choking us, the client will not be able to send a request message.
	 */
	private boolean chokingUs;
	
	/**
	 * Sending in a Map object as an argument from the Download class's constructor (where it is called).
	 * The map contains the info from from .torrent file of the peer. In this constructor, we are
	 * parsing up the map and placing the data within the fields of this class (e.g. peerIP, peerID).
	 * @param map
	 */
	@SuppressWarnings("rawtypes")
	public Peer(Map map) {
		StringBuilder IP = new StringBuilder();
		ByteBuffer IPBuffer = (ByteBuffer) map.get(OurTools.StringToByteBuffer("ip"));
		byte[] IPBytes = IPBuffer.array();
		for(int i = 0; i<IPBytes.length; i++){
			IP.append((char)IPBytes[i]);
		}
		this.peerIP = IP.toString();
		
		StringBuilder ID = new StringBuilder();
		ByteBuffer IDBuffer = (ByteBuffer) map.get(OurTools.StringToByteBuffer("peer id"));
		byte[] IDBytes = IDBuffer.array();
		for(int i = 0; i<IDBytes.length; i++){
			ID.append((char)IDBytes[i]);
		}
		this.peerID = ID.toString().getBytes();
		
		int port = (Integer) map.get(OurTools.StringToByteBuffer("port"));
		this.port = port;
	}
	
	/**
	 * returns the class's peerID
	 * @return
	 */
	public String getPeerID(){
		StringBuilder ID = new StringBuilder();
		for(int i = 0; i<this.peerID.length; i++){
			ID.append((char)this.peerID[i]);
		}
		System.out.println("the peer ID: " + ID);
		return ID.toString();
		
	}	
	
	/**
	 * returns the class's peerIP
	 * @return
	 */
	public String getPeerIP(){
		return this.peerIP;
	}
	
	/**
	 * returns the class's port
	 * @return
	 */
	public int getPort(){
		return this.port;
	}
	
	/**
	 * This method is where the messages start being sent to the remote peer. We create the handshake message
	 * byte by byte using for loops. We then initialize the socket, DataInputStream, and DataOutputStream and
	 * send the handshake message out. The client gets a response handshake message and the client continues 
	 * to send an interested message to the remote peer. The remote peer can then send an unchoked message and
	 * if it does in fact send an unchoked message, the client can then send request messages. If the remote
	 * peer doesn't send an unchoked message, then the client will wait on the remote peer to send an unchoked message.
	 * @throws UnknownHostException
	 * @throws IOException
	 * @throws InterruptedException
	 */
	void connect() throws UnknownHostException, IOException, InterruptedException{

		//1+19+8+20+20 bytes in a handshake
		byte[] handshakeMessage = new byte[68];
		int index = 0;
		//first byte is 0
		handshakeMessage[index] = 19;
		index++;
		//'BitTorrent protocol' string
		
		for(int i = 0; i<19; i++){
			handshakeMessage[index] = (byte) "BitTorrent protocol".charAt(i);
			index++;
		}
		
		//8 '0's
		for(int i = 0; i<8; i++){
			handshakeMessage[index] = 0;
			index++;
		}
		
		//20-byte torrent info hash
		for(int i = 0; i<20; i++){
			handshakeMessage[index] = Download.torrent.info_hash.get(i);
			index++;
		}
		
		//20-byte peer ID
		for(int i = 0; i<20; i++){
			handshakeMessage[index] = Download.localPeerID[i];	
			index++;
		}

		System.out.print("Handshake message: ");
		OurTools.printMessage(handshakeMessage);
		
		this.socket = new Socket(this.getPeerIP(), this.getPort());
		this.socket.setSoTimeout(0);		
		this.out = new DataOutputStream(socket.getOutputStream());
	    
		out.write(handshakeMessage);
	    out.flush();
	    this.in = new DataInputStream(socket.getInputStream());
	    byte[] responseHandshake = new byte[68];
	    
	    byte[] interested = {0, 0, 0, 1, 2};
	    System.out.print("Reply message:     ");
	    in.read(responseHandshake, 0, 68);
	    
	    //if handshake and server Peer IDs don't match
	    System.out.println("Peer ID: " + this.getPeerID());
	    for(int i = 0; i<20; i++){
	    	if((char)responseHandshake[i+48] != this.getPeerID().charAt(i)){
	    		System.out.println("Peer connection issue");
	    		this.disconnect();
	    		return;
	    	}
	    	
	    }
	    
	    

	    Thread.sleep(2000);
		OurTools.printMessage(responseHandshake);
		System.out.println();
	    Thread.sleep(1000);

		byte[] bitfieldResponse = new byte[10];
		in.read(bitfieldResponse);
		System.out.print("Peer bitfield:");
		OurTools.printMessage(bitfieldResponse);
		
		out.write(interested);
		out.flush();

	    Thread.sleep(1000);
	    System.out.println("\nAwaiting an unchoke response");
	    
	    this.chokingUs = isChokingUs();
	    	  	
	}
	
	/**
	 * This method checks to see if the remote peer is choking the client. If this is happening,
	 * the client cannot send a request message.
	 * @return
	 */
	public boolean isChokingUs(){
		
	    byte[] unchoked = {0, 0, 0, 1, 1};
 
	    byte[] responseMessage = new byte[5]; 
	    
	    try {
			in.read(responseMessage);
			this.chokingUs = !Arrays.equals(responseMessage, unchoked);
		} catch (IOException e) {
			e.printStackTrace();
		}
	    
	    return (this.chokingUs);

	}
	
	/**
	 * This method will send the request message(s). This will handle numerous cases. If the piece
	 * we want to request has a size larger than 16384 bytes, it will split the piece into subpieces.
	 * If it is less than 16384, we will only send one request message for that one piece. It has boolean
	 * flags set to determine whether the piece is the lastPiece and whether piece needs to be split up into
	 * subpieces. If subpieces are required, the request messages shall be sent separately and the byte arrays
	 * that are returned from the remote peer will be appended to each other to create one large byte array
	 * forming the original piece's byte array. This byte array is then returned by the method.
	 * 
	 * @param pieceNumber is used to determine the index of the request message
	 * @return
	 * @throws InterruptedException
	 * @throws IOException
	 */
	public byte[] getPiece(int pieceNumber) throws InterruptedException, IOException{
		
		
	    int length = Download.torrent.piece_length;
	    int short_length = length/2;
	    int extra_length = 0;

	    boolean lastPiece = false, needSubPieces = true;
	    if (pieceNumber == Download.torrent.piece_hashes.length - 1){
	    	
	    	lastPiece = true;
	    	int lengthOfLastPiece = Download.torrent.file_length - ((Download.torrent.piece_hashes.length - 1)*length);
	    	
	    	if(lengthOfLastPiece < 16384){
	    		short_length = lengthOfLastPiece;
	    		needSubPieces = false;
	    	}else{
	    		extra_length = lengthOfLastPiece - short_length;
	    	}
	    	
	    }
	    
	    byte[] request = new byte[17];
	    	    
	    request[0] = 0;
	    request[1] = 0;
	    request[2] = 0;
	    request[3] = 13;
	    request[4] = 6;
	    
	    byte[] pNBytes = ByteBuffer.allocate(4).putInt(pieceNumber).array();
	    //PieceNumberBytes
	    
	    request[5] = pNBytes[0]; request[6] = pNBytes[1]; request[7] = pNBytes[2]; request[8] = pNBytes[3];
	    request[9] = 0; request[10] = 0; request[11] = 0; request[12] = 0;
	    
	    byte[] bytes = ByteBuffer.allocate(4).putInt(short_length).array();
	    
	    request[13] = bytes[0];
	    request[14] = bytes[1];
	    request[15] = bytes[2];
	    request[16] = bytes[3];
	    System.out.println();
	  	
	    this.out.write(request);
	    this.out.flush();
	  	Thread.sleep(1000);
	  	
	  	byte[] response = new byte[short_length + 13]; //first subpiece
	  	
	  	
	  	in.read(response, 0, short_length+13); // TODO: Make sure it is not a request message!
	  	
	  	byte[] piece = new byte[short_length];
	  	
	  	for(int i = 0; i < short_length; i++){
	  		piece[i] = response[i+13];
	  	}
	  	
	  	byte[] finalPiece = null;
	  	if (needSubPieces){
	  		
		  	//REQUEST FOR SECOND SUBPIECE
	  		if (!lastPiece){
	  			request[9] = bytes[0]; request[10] = bytes[1]; request[11] = bytes[2]; request[12] = bytes[3];
	  		}else{
	  			byte[] extraBytes = ByteBuffer.allocate(4).putInt(extra_length).array();
	  			byte[] offsetBytes = ByteBuffer.allocate(4).putInt(length/2).array();
	  			//16384 goes into 9-12
	  			request[9] = offsetBytes[0]; request[10] = offsetBytes[1]; request[11] = offsetBytes[2]; request[12] = offsetBytes[3];
	  			request[13] = extraBytes[0]; request[14] = extraBytes[1]; request[15] = extraBytes[2]; request[16] = extraBytes[3];
	  		}
	  		
		  	this.out.write(request);
		  	this.out.flush();
		  	Thread.sleep(1000);
		  	//TODO: make sure it's a piece message as a response
		  	if (!lastPiece){
			  	byte[] response2 = new byte[short_length + 13]; //second subpiece
			  	in.read(response2, 0, short_length+13);

			  	byte[] piece2 = new byte[short_length];
			  	for(int i = 0; i<short_length; i++){
			  		piece2[i] = response2[i+13];
			  	}
			 
			  	//appending piece2 byte array to piece1 byte array
			  	finalPiece = new byte[piece.length + piece2.length];
			  	System.arraycopy(piece, 0, finalPiece, 0, piece.length);
			  	System.arraycopy(piece2, 0, finalPiece, piece.length, piece2.length);
		  	} else{
		  		byte[] response2 = new byte[extra_length + 13]; //second subpiece
			  	in.read(response2, 0, extra_length+13);

			  	byte[] piece2 = new byte[extra_length];
			  	for(int i = 0; i<extra_length; i++){
			  		piece2[i] = response2[i+13];
			  	}
			 
			  	//appending piece2 byte array to piece1 byte array
			  	finalPiece = new byte[piece.length + piece2.length];
			  	System.arraycopy(piece, 0, finalPiece, 0, piece.length);
			  	System.arraycopy(piece2, 0, finalPiece, piece.length, piece2.length);
		  	}
		  	
	  	}

		if (needSubPieces){
			return finalPiece;
		}else{
			return piece;
		}
		
	}
	
	/**
	 * This method shall close all the streams (DataInputStream, DataOutputStream) and it
	 * will close the socket as well.
	 */
	void disconnect(){
		try {
			in.close();
			out.close();
			socket.close();

		} catch (IOException e) {
			e.printStackTrace();
		}
	}
};
